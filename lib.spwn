extract import "colors.spwn"
extract obj_props

type @ptnc
impl @ptnc {
    new: (level: [[@string]], distance: @number = 30, invisible: @bool = true) {
        return @ptnc::{
            level,
            distance,
            start: {
                x: 0,
                y: 0,
                group: ?g,
            },
            player: {
                body: { group: ?g, block: ?b },
                arm: ?g,
                hand: { group: ?g, block: ?b },
            },
            adjacent_blocks: { group: ?g, block: ?b },
            invisible: () {
                if invisible {
                    invisible_group = ?g
                    invisible_group.alpha(0)
                    return invisible_group
                }
            } (),
        }
    },
    parse_level: (input: @string) -> [[@string]] {
        lines = input.replace(r"\r?\n","\n").split("\n").filter(v => v.trim().length > 0)
        return lines.map(l => @array(l))
    },
    invis: (self, anything = []) {
        return match anything {
            @array: anything,
            else: [anything],
        } + ([self.invisible] if self.invisible is @group else [])
    },
    display_level: (self, x_offset: @number, y_offset: @number) -> @dictionary {
        for y in 0..self.level.length {
            for x in 0..self.level[y].length {
                if self.level[y][x] == " " { continue }

                current_color = get_color(self.level[y][x])
        
                object_x = x_offset + x * self.distance
                object_y = y_offset + y * self.distance
        
                let hitbox_groups = []

                if self.level[y][x] == "S" {
                    self.start.x = object_x
                    self.start.y = object_y 
                    hitbox_groups.push(self.start.group)
                }

                // block display
                $.add(obj {
                    OBJ_ID: 211,
                    X: object_x,
                    Y: object_y,
                    COLOR: current_color.color,
                    SCALING: self.distance / 30,
                })
                // hitbox
                $.add(obj {
                    OBJ_ID: 1816,
                    X: object_x,
                    Y: object_y,
                    BLOCK_A: current_color.block,
                    SCALING: self.distance / 30 * 0.01,
                    GROUPS: self.invis(hitbox_groups),
                })
            }
        }
    },
    display_player: (self) -> @dictionary {
        // body hitbox
        $.add(obj {
            OBJ_ID: 1816,
            X: self.start.x,
            Y: self.start.y,
            BLOCK_A: self.player.body.block,
            GROUPS: self.invis(self.player.body.group),
            SCALING: self.distance / 30 * 0.1,
            DYNAMIC_BLOCK: true,
        })
        // hand hitbox
        $.add(obj {
            OBJ_ID: 1816,
            X: self.start.x - self.distance,
            Y: self.start.y,
            BLOCK_A: self.player.hand.block,
            GROUPS: self.invis([self.player.hand.group, self.player.arm]),
            SCALING: self.distance / 30 * 0.1,
            DYNAMIC_BLOCK: true,
        })

        // electricity-water checker
        distances = [0,1,2,3].map(i=>[$.cos(i*PI/2),$.sin(i*PI/2)].map(v=>self.distance*v))
        
        for [ x_off, y_off ] in distances {
            $.add(obj {
                OBJ_ID: 1816,
                X: self.start.x + x_off,
                Y: self.start.y + y_off,
                BLOCK_A: self.adjacent_blocks.block,
                GROUPS: self.invis(self.adjacent_blocks.group),
                SCALING: self.distance / 30 * 0.3,
                DYNAMIC_BLOCK: true,
            })
        }

        -> self.player.arm.follow(self.player.body.group)
        -> self.adjacent_blocks.group.follow(self.player.body.group)
    },
}
